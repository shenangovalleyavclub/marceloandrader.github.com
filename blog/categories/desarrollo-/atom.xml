<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: desarrollo, | Marcelo Andrade]]></title>
  <link href="http://marceloandrader.github.com/blog/categories/desarrollo-/atom.xml" rel="self"/>
  <link href="http://marceloandrader.github.com/"/>
  <updated>2013-11-15T18:16:39-05:00</updated>
  <id>http://marceloandrader.github.com/</id>
  <author>
    <name><![CDATA[Marcelo Andrade]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Aplicaciones Web del lado del Cliente con MVVM]]></title>
    <link href="http://marceloandrader.github.com/blog/2013/02/19/aplicaciones-web-del-lado-del-cliente-con-mvvm/"/>
    <updated>2013-02-19T11:13:00-05:00</updated>
    <id>http://marceloandrader.github.com/blog/2013/02/19/aplicaciones-web-del-lado-del-cliente-con-mvvm</id>
    <content type="html"><![CDATA[<p>Aplicaciones web con alta carga de l&oacute;gica del lado cliente
han comenzado a popularizarse, la idea es que mucho de lo que antes
se hac&iacute;a en el servidor, ahora se lo puede hacer en el cliente (browser)
y dejar al servidor solo como un API de acceso a la persistencia de
los datos.</p>

<!-- more -->


<p>Ejemplos de este tipo de aplicaciones web son: Gmail, Twitter, Facebook, etc.</p>

<p>En estos escenarios librer&iacute;as como jQuery se queda corto
para organizar la estructura de la aplicaci&oacute;n, jQuery es
un gran aliado en la lucha contra la estandarizaci&oacute;n de
llamadas de bajo nivel de cada browser como por ejemplo el acceso
al DOM, y realizar cambios sencillos en la p&aacute;gina,
pero para organizar l&oacute;gica no, e inmediatamente comienza
a sentirse un c&oacute;digo dif&iacute;cil de mantener en el futuro.</p>

<p>Durante los pasados 2 a&ntilde;os he vivido esta transici&oacute;n de
tratar de usar jQuery para todo, a usar una nueva librer&iacute;a que
me ha permitido hacer mucho m&aacute;s y tener un c&oacute;digo m&aacute;s
limpio, la librer&iacute;a de la que les hablo es <a href="http://knockoutjs.com/">knockout</a>.</p>

<p>Esta librer&iacute;a de javascript tiene estas principales caracter&iacute;sticas:</p>

<ul>
<li><p><em>Declarative Bindings</em>: Esto permite enlazar los elementos del DOM
usando un atributo especial de html5 (<code>data-bind</code>), se puede enlazar
desde eventos en el elemento, hasta cambios de estilos manejados por
evaluaci&oacute;n de c&oacute;digo javascript.</p></li>
<li><p><em>Automatic UI Refresh</em>: En esta librer&iacute;a los models son simples
objetos javascript a los cuales se puede atar v&iacute;a <code>data-bind</code> los
valores de estos para autom&aacute;ticamente desplegar en la vista sin tener
que codificar estos cambios, esto en mi experiencia es lo mejor de knockout
porque ahorra mucho c&oacute;digo repetitivo.</p></li>
<li><p><em>Dependendy Tracking</em>: Cuando se definen los modelos en objetos javascript
se utiliza ciertas funciones que permiten enlazar propiedades compuestas
por otras propiedades o atributos calculados.</p></li>
<li><p><em>Templating</em>: En combinaci&oacute;n con el refresco del UI autom&aacute;tico
permite definir como desplegar datos usando simple html m&aacute;s etiquetas
de template como <code>foreach</code> of <code>if</code> para crear el html final.</p></li>
</ul>


<p>Los tutoriales en la p&aacute;gina son muy explicativos <a href="http://learn.knockoutjs.com/">learn.knockoutjs.com</a>
y la <a href="http://knockoutjs.com/documentation/introduction.html">documentaci&oacute;n</a> es bastante completa.</p>

<p>Este cambio de librer&iacute;a requiere un poco de cambio en la forma de pensar
para crear una soluci&oacute;n m&aacute;s robusta, lo bueno de este cambio es
que adicional a tener un mejor c&oacute;digo he comenzado a escribir tests
para mis clases javascript, lo que antes era imposible con jQuery simple.</p>

<p>Les dejo con un ejemplo de como usar <code>ko.observable</code> y <code>ko.observableArray</code> son
las funciones basicas de KO que permiten hacer uso de todo su potencial.</p>

<p><code>ko.observable</code> permite rastrear los cambios a una variable simple, una vez creada
una variable con esta funci&oacute;n, se puede usar para realizar el refresco autom&aacute;tico
de la interfaz, crear atributos calculados, etc.</p>

<p><code>ko.observableArray</code> permite rastrear los cambios a una colecci&oacute;n de objetos
cuando se agregan/remueven.</p>

<p><iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/A9y7W/embedded/js,resources,html,css,result/light/"></iframe></p>
]]></content>
  </entry>
  
</feed>
