<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Marcelo Andrade]]></title>
  <link href="http://marceloandrader.github.com/atom.xml" rel="self"/>
  <link href="http://marceloandrader.github.com/"/>
  <updated>2013-11-18T09:59:51-05:00</updated>
  <id>http://marceloandrader.github.com/</id>
  <author>
    <name><![CDATA[Marcelo Andrade]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Docker]]></title>
    <link href="http://marceloandrader.github.com/blog/2013/11/15/docker/"/>
    <updated>2013-11-15T17:19:00-05:00</updated>
    <id>http://marceloandrader.github.com/blog/2013/11/15/docker</id>
    <content type="html"><![CDATA[<p>Desplegar aplicaciones en linux es un proceso fácil si tu aplicación
solo usa un servidor, normalmente se usa el sistema propio de manejo de paquetes
para poner a punto el servidor con todos los componentes instalados
para publicar una aplicación web, sitio web dinámico, etc.</p>

<!-- more -->


<p>Para evitar duplicar el esfuerzo de armar el servidor con todo el software base
primero en desarrollo, luego en el ambiente de pruebas y luego en producción
se puede utilizar un sistema como <a href="http://www.opscode.com/chef/">Chef</a> o
<a href="http://puppetlabs.com/puppet/what-is-puppet">Puppet</a> para organizar un
poco la &#8220;receta&#8221; necesaria para duplicar el mismo sistema en otro servidor.</p>

<p>El problema de estos sistemas desde mi punto de vista es que es muy
difícil que una misma receta funcione tanto en un ubuntu como en centos
o en otro sabor de linux.</p>

<p>La solución a esto la he visto en <a href="http://www.docker.io/">docker</a> este
proyecto permite empaquetar una aplicación con todas sus dependencias de software
en un contenedor que se puede ejecutar en cualquier linux que soporte <a href="http://linuxcontainers.org/">lxc</a>.</p>

<p>Docker es una utilidad de más alto nivel que permite usar
fácilmente linux containers, crearlos, provisionarlos, publicarlos y desplegarlos.</p>

<p>Para empezar a usarlo la forma más fácil en mi laptop con sistema mac
es usando <a href="http://marceloandrader.github.com/blog/2012/02/06/aislar-ambientes-de-desarrollo-con-vagrant/">vagrant</a>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone https://github.com/dotcloud/docker.git
</span><span class='line'><span class="nb">cd </span>docker
</span><span class='line'>vagrant up
</span></code></pre></td></tr></table></div></figure>


<p>Una vez que vagrant descargue la máquina base, e instale docker y sus dependencias
el sistema está listo para usarse. Se puede ingresar a la máquina con ubuntu y docker
instalados con:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vagrant ssh
</span></code></pre></td></tr></table></div></figure>


<p>Docker tiene un registro de contenedores público en <a href="https://index.docker.io/">index.docker.io</a>
pero también se puede instalar la aplicación de registro para usarlo internamente <a href="https://github.com/dotcloud/docker-registry">docker registry</a>
la idea es que este registro es donde se envía (push) y se toma (pull) imágenes ya generadas
de contenedores para ser usadas como base o como vienen.</p>

<p>Antes de pasar a cómo usar docker es importante tener en cuenta los terminos
que usa docker para referirse a sus conceptos:</p>

<ul>
<li><strong>container</strong> o contenedor es una imagen de un sistema que se está ejecutando</li>
<li><strong>image</strong> o imagen es un paquete que tiene todo el software base y dependencias ya configuradas para ser ejecutado</li>
<li><strong>Dockerfile</strong> o Dockerfile es una archivo de definición de una imagen</li>
<li><strong>layers</strong> o capas, docker usa un sistema de archivos AUFS que es un sistema que permite crear capas
de sistemas de archivo, más adelante un ejemplo de como funciona.</li>
</ul>


<p>Para empezar a usar la forma más sencilla es invocar en modo interactivo un bash dentro de un contenedor:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo docker run -t -i ubuntu /bin/bash
</span></code></pre></td></tr></table></div></figure>


<p>Si el registro local de docker aun no tiene la imagen ubuntu descargada, primero la descargará
y una vez hecho esto ejecutará el comando <code>run</code> que inicia el contenedor basado en la imagen <code>ubuntu</code>
como pueden observar el nuevo prompt es algo como:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@acbdd2d5ea49:/#
</span></code></pre></td></tr></table></div></figure>


<p>este prompt es del sistema del contenedor ejecutándose, como se observó el tiempo de arranque es
casi instantaneo, comparado con un boot a una instancia virtualizada de aproximadamente 2-5 minutos
dependiendo de la máquina host.</p>

<p>Si inician otra sesión <code>vagrant ssh</code> y ejecutan <code>sudo docker ps</code> les indicará que contenedores están
ejecutándose en este momento.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vagrant@precise64:~<span class="nv">$ </span>sudo docker ps
</span><span class='line'>ID                  IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
</span><span class='line'>acbdd2d5ea49        ubuntu:12.04        /bin/bash           3 minutes ago       Up 3 minutes                            gray_tiger
</span></code></pre></td></tr></table></div></figure>


<p>Para terminar la ejecución del contenedor se puede simplemente hacer exit en la sesión de bash dentro del contenedor
y esto hara que el contenedor ya no se esté ejecutando.</p>

<p>Si hacen <code>docker ps</code> nuevamente el contenedor ya no está. Para ver contenedores que ya no están en uso se usa <code>sudo docker ps -a</code>.</p>

<p>Hasta aquí nada del otro mundo ejecutar un bash dentro de un contenedor lo interesante viene
cuando dentro de este bash se puede comenzar a instalar software adicional por ejemplo instalar
apache para servir páginas web estáticas, lo interesante de esto es que el sistema principal
se mantiene libre de dependencias de la misma aplicación, todo esto está dentro del contenedor.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo docker run -t -i ubuntu /bin/bash
</span><span class='line'>root@acbdd2d5ea49:/# apt-get update
</span><span class='line'>root@acbdd2d5ea49:/# apt-get install -y apache2
</span><span class='line'>root@acbdd2d5ea49:/# <span class="nb">exit</span>
</span><span class='line'>sudo docker ps -a
</span><span class='line'><span class="c"># verificar el nombre del contenedor en la última columna en mi caso es gray_tiger</span>
</span><span class='line'>sudo docker commit gray_tiger marceloandrader/apache2
</span></code></pre></td></tr></table></div></figure>


<p>Justo antes de <code>docker commit</code> el sistema de archivos está en capas (layers) hay algunos
archivos que se encuentran en la imagen y otros archivos que están en el contenedor,
el momento que se hace commit estos archivos se guardan como otra imagen llamada
<code>marceloandrader/apache2</code> que es
apache2 dentro de un contenedor para ejecutarla y publicar algun sitio web:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo docker run -t -i -p 80 -v /home/vagrant:/var/www marceloandrader/apache2 /bin/bash
</span><span class='line'>root@acbdd2d5ea49:/# service apache2 start
</span></code></pre></td></tr></table></div></figure>


<p>Ahora desde otra sesión ssh se puede verificar que apache esté sirviendo los archivos que se encuentran
en /home/vagrant en el sistema host a través de apache2 ejecutándose en el contenedor</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vagrant@precise64:~<span class="nv">$ </span>curl http://0.0.0.0:8080/
</span><span class='line'>About to connect<span class="o">()</span> to 0.0.0.0 port 8080 <span class="o">(</span><span class="c">#0)</span>
</span><span class='line'>*   Trying 0.0.0.0... connected
</span><span class='line'>&gt; GET / HTTP/1.1
</span><span class='line'>&gt; User-Agent: curl/7.22.0 <span class="o">(</span>x86_64-pc-linux-gnu<span class="o">)</span> libcurl/7.22.0 OpenSSL/1.0.1 zlib/1.2.3.4 libidn/1.23 librtmp/2.3
</span><span class='line'>&gt; Host: 0.0.0.0:8080
</span><span class='line'>&gt; Accept: */*
</span><span class='line'>&gt;
</span><span class='line'>&lt; HTTP/1.1 200 OK
</span><span class='line'>&lt; Date: Fri, 15 Nov 2013 23:14:14 GMT
</span><span class='line'>&lt; Server: Apache/2.2.22 <span class="o">(</span>Ubuntu<span class="o">)</span>
</span><span class='line'>&lt; Vary: Accept-Encoding
</span><span class='line'>&lt; Content-Length: 1579
</span><span class='line'>&lt; Content-Type: text/html;charset<span class="o">=</span>UTF-8
</span><span class='line'>&lt;
</span><span class='line'>&lt;!DOCTYPE HTML PUBLIC <span class="s2">&quot;-//W3C//DTD HTML 3.2 Final//EN&quot;</span>&gt;
</span><span class='line'>&lt;html&gt;
</span><span class='line'> &lt;head&gt;
</span><span class='line'>  &lt;title&gt;Index of /&lt;/title&gt;
</span><span class='line'> &lt;/head&gt;
</span><span class='line'> &lt;body&gt;
</span><span class='line'>&lt;h1&gt;Index of /&lt;/h1&gt;
</span><span class='line'>&lt;table&gt;&lt;tr&gt;&lt;th&gt;&lt;img <span class="nv">src</span><span class="o">=</span><span class="s2">&quot;/icons/blank.gif&quot;</span> <span class="nv">alt</span><span class="o">=</span><span class="s2">&quot;[ICO]&quot;</span>&gt;&lt;/th&gt;&lt;th&gt;&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;?C=N;O=D&quot;</span>&gt;Name&lt;/a&gt;&lt;/th&gt;&lt;th&gt;&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;?C=M;O=A&quot;</span>&gt;Last modified&lt;/a&gt;&lt;/th&gt;&lt;th&gt;&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;?C=S;O=A&quot;</span>&gt;Size&lt;/a&gt;&lt;/th&gt;&lt;th&gt;&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;?C=D;O=A&quot;</span>&gt;Description&lt;/a&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th <span class="nv">colspan</span><span class="o">=</span><span class="s2">&quot;5&quot;</span>&gt;&lt;hr&gt;&lt;/th&gt;&lt;/tr&gt;
</span><span class='line'>&lt;tr&gt;&lt;td <span class="nv">valign</span><span class="o">=</span><span class="s2">&quot;top&quot;</span>&gt;&lt;img <span class="nv">src</span><span class="o">=</span><span class="s2">&quot;/icons/folder.gif&quot;</span> <span class="nv">alt</span><span class="o">=</span><span class="s2">&quot;[DIR]&quot;</span>&gt;&lt;/td&gt;&lt;td&gt;&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;GateOne/&quot;</span>&gt;GateOne/&lt;/a&gt;&lt;/td&gt;&lt;td <span class="nv">align</span><span class="o">=</span><span class="s2">&quot;right&quot;</span>&gt;07-Nov-2013 22:41  &lt;/td&gt;&lt;td <span class="nv">align</span><span class="o">=</span><span class="s2">&quot;right&quot;</span>&gt;  - &lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
</span><span class='line'>&lt;tr&gt;&lt;td <span class="nv">valign</span><span class="o">=</span><span class="s2">&quot;top&quot;</span>&gt;&lt;img <span class="nv">src</span><span class="o">=</span><span class="s2">&quot;/icons/unknown.gif&quot;</span> <span class="nv">alt</span><span class="o">=</span><span class="s2">&quot;[   ]&quot;</span>&gt;&lt;/td&gt;&lt;td&gt;&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;VBoxGuestAdditions_4.2.12.iso&quot;</span>&gt;VBoxGuestAdditions_4.2.12.iso&lt;/a&gt;&lt;/td&gt;&lt;td <span class="nv">align</span><span class="o">=</span><span class="s2">&quot;right&quot;</span>&gt;12-Apr-2013 10:17  &lt;/td&gt;&lt;td <span class="nv">align</span><span class="o">=</span><span class="s2">&quot;right&quot;</span>&gt; 57M&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
</span><span class='line'>&lt;tr&gt;&lt;td <span class="nv">valign</span><span class="o">=</span><span class="s2">&quot;top&quot;</span>&gt;&lt;img <span class="nv">src</span><span class="o">=</span><span class="s2">&quot;/icons/folder.gif&quot;</span> <span class="nv">alt</span><span class="o">=</span><span class="s2">&quot;[DIR]&quot;</span>&gt;&lt;/td&gt;&lt;td&gt;&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;docker-mysql/&quot;</span>&gt;docker-mysql/&lt;/a&gt;&lt;/td&gt;&lt;td <span class="nv">align</span><span class="o">=</span><span class="s2">&quot;right&quot;</span>&gt;06-Nov-2013 15:35  &lt;/td&gt;&lt;td <span class="nv">align</span><span class="o">=</span><span class="s2">&quot;right&quot;</span>&gt;  - &lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
</span><span class='line'>&lt;tr&gt;&lt;td <span class="nv">valign</span><span class="o">=</span><span class="s2">&quot;top&quot;</span>&gt;&lt;img <span class="nv">src</span><span class="o">=</span><span class="s2">&quot;/icons/text.gif&quot;</span> <span class="nv">alt</span><span class="o">=</span><span class="s2">&quot;[TXT]&quot;</span>&gt;&lt;/td&gt;&lt;td&gt;&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;postinstall.sh&quot;</span>&gt;postinstall.sh&lt;/a&gt;&lt;/td&gt;&lt;td <span class="nv">align</span><span class="o">=</span><span class="s2">&quot;right&quot;</span>&gt;14-Sep-2012 06:02  &lt;/td&gt;&lt;td <span class="nv">align</span><span class="o">=</span><span class="s2">&quot;right&quot;</span>&gt;6.3K&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
</span><span class='line'>&lt;tr&gt;&lt;td <span class="nv">valign</span><span class="o">=</span><span class="s2">&quot;top&quot;</span>&gt;&lt;img <span class="nv">src</span><span class="o">=</span><span class="s2">&quot;/icons/text.gif&quot;</span> <span class="nv">alt</span><span class="o">=</span><span class="s2">&quot;[TXT]&quot;</span>&gt;&lt;/td&gt;&lt;td&gt;&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;start-pph.sh&quot;</span>&gt;start-pph.sh&lt;/a&gt;&lt;/td&gt;&lt;td <span class="nv">align</span><span class="o">=</span><span class="s2">&quot;right&quot;</span>&gt;06-Nov-2013 22:56  &lt;/td&gt;&lt;td <span class="nv">align</span><span class="o">=</span><span class="s2">&quot;right&quot;</span>&gt;641 &lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
</span><span class='line'>&lt;tr&gt;&lt;th <span class="nv">colspan</span><span class="o">=</span><span class="s2">&quot;5&quot;</span>&gt;&lt;hr&gt;&lt;/th&gt;&lt;/tr&gt;
</span><span class='line'>&lt;/table&gt;
</span><span class='line'>&lt;address&gt;Apache/2.2.22 <span class="o">(</span>Ubuntu<span class="o">)</span> Server at 0.0.0.0 Port 8080&lt;/address&gt;
</span><span class='line'>&lt;/body&gt;&lt;/html&gt;
</span><span class='line'>* Connection <span class="c">#0 to host 0.0.0.0 left intact</span>
</span><span class='line'>* Closing connection <span class="c">#0</span>
</span></code></pre></td></tr></table></div></figure>


<p>La idea de esto es que esta imagen llamada <code>marceloandrader/apache2</code> se la puede enviar a un sistema de producción
y ejecutarla sin ningún cambio.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Aplicaciones Web del lado del Cliente con MVVM]]></title>
    <link href="http://marceloandrader.github.com/blog/2013/02/19/aplicaciones-web-del-lado-del-cliente-con-mvvm/"/>
    <updated>2013-02-19T11:13:00-05:00</updated>
    <id>http://marceloandrader.github.com/blog/2013/02/19/aplicaciones-web-del-lado-del-cliente-con-mvvm</id>
    <content type="html"><![CDATA[<p>Aplicaciones web con alta carga de l&oacute;gica del lado cliente
han comenzado a popularizarse, la idea es que mucho de lo que antes
se hac&iacute;a en el servidor, ahora se lo puede hacer en el cliente (browser)
y dejar al servidor solo como un API de acceso a la persistencia de
los datos.</p>

<!-- more -->


<p>Ejemplos de este tipo de aplicaciones web son: Gmail, Twitter, Facebook, etc.</p>

<p>En estos escenarios librer&iacute;as como jQuery se queda corto
para organizar la estructura de la aplicaci&oacute;n, jQuery es
un gran aliado en la lucha contra la estandarizaci&oacute;n de
llamadas de bajo nivel de cada browser como por ejemplo el acceso
al DOM, y realizar cambios sencillos en la p&aacute;gina,
pero para organizar l&oacute;gica no, e inmediatamente comienza
a sentirse un c&oacute;digo dif&iacute;cil de mantener en el futuro.</p>

<p>Durante los pasados 2 a&ntilde;os he vivido esta transici&oacute;n de
tratar de usar jQuery para todo, a usar una nueva librer&iacute;a que
me ha permitido hacer mucho m&aacute;s y tener un c&oacute;digo m&aacute;s
limpio, la librer&iacute;a de la que les hablo es <a href="http://knockoutjs.com/">knockout</a>.</p>

<p>Esta librer&iacute;a de javascript tiene estas principales caracter&iacute;sticas:</p>

<ul>
<li><p><em>Declarative Bindings</em>: Esto permite enlazar los elementos del DOM
usando un atributo especial de html5 (<code>data-bind</code>), se puede enlazar
desde eventos en el elemento, hasta cambios de estilos manejados por
evaluaci&oacute;n de c&oacute;digo javascript.</p></li>
<li><p><em>Automatic UI Refresh</em>: En esta librer&iacute;a los models son simples
objetos javascript a los cuales se puede atar v&iacute;a <code>data-bind</code> los
valores de estos para autom&aacute;ticamente desplegar en la vista sin tener
que codificar estos cambios, esto en mi experiencia es lo mejor de knockout
porque ahorra mucho c&oacute;digo repetitivo.</p></li>
<li><p><em>Dependendy Tracking</em>: Cuando se definen los modelos en objetos javascript
se utiliza ciertas funciones que permiten enlazar propiedades compuestas
por otras propiedades o atributos calculados.</p></li>
<li><p><em>Templating</em>: En combinaci&oacute;n con el refresco del UI autom&aacute;tico
permite definir como desplegar datos usando simple html m&aacute;s etiquetas
de template como <code>foreach</code> of <code>if</code> para crear el html final.</p></li>
</ul>


<p>Los tutoriales en la p&aacute;gina son muy explicativos <a href="http://learn.knockoutjs.com/">learn.knockoutjs.com</a>
y la <a href="http://knockoutjs.com/documentation/introduction.html">documentaci&oacute;n</a> es bastante completa.</p>

<p>Este cambio de librer&iacute;a requiere un poco de cambio en la forma de pensar
para crear una soluci&oacute;n m&aacute;s robusta, lo bueno de este cambio es
que adicional a tener un mejor c&oacute;digo he comenzado a escribir tests
para mis clases javascript, lo que antes era imposible con jQuery simple.</p>

<p>Les dejo con un ejemplo de como usar <code>ko.observable</code> y <code>ko.observableArray</code> son
las funciones basicas de KO que permiten hacer uso de todo su potencial.</p>

<p><code>ko.observable</code> permite rastrear los cambios a una variable simple, una vez creada
una variable con esta funci&oacute;n, se puede usar para realizar el refresco autom&aacute;tico
de la interfaz, crear atributos calculados, etc.</p>

<p><code>ko.observableArray</code> permite rastrear los cambios a una colecci&oacute;n de objetos
cuando se agregan/remueven.</p>

<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/A9y7W/embedded/js,resources,html,css,result/light/"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Caso pr&aacute;ctico de uso de vagrant]]></title>
    <link href="http://marceloandrader.github.com/blog/2012/05/28/caso-practico-de-uso-de-vagrant/"/>
    <updated>2012-05-28T17:01:00-05:00</updated>
    <id>http://marceloandrader.github.com/blog/2012/05/28/caso-practico-de-uso-de-vagrant</id>
    <content type="html"><![CDATA[<p>Para este ejemplo levantaremos un sistema linux (ubuntu)
con apache como ejemplo del uso de vagrant.</p>

<h2>Pre-Requisitos</h2>

<p>Instalar VirtualBox <a href="http://www.virtualbox.org/wiki/Downloads">Descargar VirtualBox</a>
vagrant soporta las versiones 4.0.x y 4.1.x</p>

<h2>Instalando Vagrant</h2>

<p>Descargar el paquete adecuado para su sistema operativo <a href="http://downloads.vagrantup.com/tags/v1.0.3">Descargar Vagrant</a>
e instalarlo.</p>

<!-- more -->


<h2>Probando la instalaci&oacute;n</h2>

<p>Abrir una terminal y ejecutar :</p>

<figure class='code'><figcaption><span>check vagrant  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant
</span><span class='line'>Usage: vagrant -v -h <span class="nb">command</span> &lt;args&gt;
</span><span class='line'>
</span><span class='line'>    -v, --version                    Print the version and exit.
</span><span class='line'>    -h, --help                       Print this help.
</span><span class='line'>  ...
</span><span class='line'><span class="nv">$ </span>vagrant --version
</span><span class='line'>Vagrant version 1.0.3
</span></code></pre></td></tr></table></div></figure>


<h2>Descargando una m&aacute;quina base (Base Box)</h2>

<p>Vagrant funciona a base de m&aacute;quinas base que son
distribuciones de cualquier sistema operativo ligeramente
modificadas para que vagrant pueda ejecutarse en ellas,
normalmente instalar ruby, chef.</p>

<figure class='code'><figcaption><span>add base box  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant box add lucid32 http://files.vagrantup.com/lucid32.box
</span></code></pre></td></tr></table></div></figure>


<p>Lo que hace este comando es agregar una m&aacute;quina base, es decir
el archivo vmdk (el disco duro de la m&aacute;quina de virtual box)
junto con otros archivos de configuraci&oacute;n a un directorio
general: <code>$HOME/.vagrant.d/boxes</code></p>

<p>La idea es que a partir de este se pueden crear muchos ambientes
usando el mismo archivo descargado. Como en el ejemplo se descarga
un ubuntu lucid de 32 bits, al crear otra m&aacute;quina virtual
con vagrant, esta no se modifica solo se copia y se inicia la
instalaci&oacute;n de paquetes, de esta forma si algo va mal se puede
destruir la m&aacute;quina virtual y volver a regenerarla sin
problemas y sin descargar nuevamente la m&aacute;quina base.</p>

<h2>Creando la primera m&aacute;quina virtual</h2>

<p>Los ambientes virtuales normalmente estan atados a un proyecto
espec&iacute;fico en el que se este trabajando, por lo cual el siguiente
comando debe ejecutarse dentro del directorio del proyecto.</p>

<figure class='code'><figcaption><span>init vagrant  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant init lucid32
</span></code></pre></td></tr></table></div></figure>


<p>Este comando crear&aacute; un archivo <code>Vagrantfile</code> en el cual
esta la configuraci&oacute;n de la m&aacute;quina por ejemplo:</p>

<ul>
<li>Cu&aacute;l es el box base, y su url</li>
<li>Qu&eacute; tipo de interfaz de red usa y cual IP usar</li>
<li>Puertos redirigidos (forward ports) para acceder a puertos dentro del ambiente virtual</li>
<li>Directorios compartidos (por defecto siempre se comparte /vagrant dentro del ambiente a la m&aacute;quina host en el directorio
donde se encuentra el Vagrantfile</li>
<li>El tipo de provisionador (puppet, chef o propio) esto es el
sistema que se usar&aacute; para instalar los paquetes</li>
</ul>


<h2>Iniciando el ambiente virtual</h2>

<p>Este comando toma la configuraci&oacute;n del proyecto en Vagrantfile
e inicia una m&aacute;quina virtual en virtual box, y la provisiona
dependiendo del sistema usado, en este momento no lo hemos definido todav&iacute;a
y solo iniciar&aacute; la m&aacute;quina sin ning&uacute;n paquete
extra instalado.</p>

<figure class='code'><figcaption><span>vagrant up  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant up
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Importing base box <span class="s1">&#39;lucid32&#39;</span>...
</span><span class='line'>Guest Additions Version: 4.1.0
</span><span class='line'>VirtualBox Version: 4.1.4
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Matching MAC address <span class="k">for </span>NAT networking...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Clearing any previously <span class="nb">set </span>forwarded ports...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Forwarding ports...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> -- <span class="nv">22</span> <span class="o">=</span>&gt; 2222 <span class="o">(</span>adapter 1<span class="o">)</span>
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Creating shared folders metadata...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Clearing any previously <span class="nb">set </span>network interfaces...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Booting VM...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Waiting <span class="k">for </span>VM to boot. This can take a few minutes.
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> VM booted and ready <span class="k">for </span>use!
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Mounting shared folders...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> -- v-root: /vagrant
</span></code></pre></td></tr></table></div></figure>


<p>Ok la m&aacute;quina est&aacute; levantada y ejecut&aacute;ndose
para ingresar podemos hacer ssh a esta:</p>

<figure class='code'><figcaption><span>vagrant ssh  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant ssh
</span><span class='line'>Linux lucid32 2.6.32-33-generic <span class="c">#70-Ubuntu SMP Thu Jul 7 21:09:46 UTC 2011 i686 GNU/Linux</span>
</span><span class='line'>Ubuntu 10.04.3 LTS
</span><span class='line'>
</span><span class='line'>Welcome to Ubuntu!
</span><span class='line'> * Documentation:  https://help.ubuntu.com/
</span><span class='line'>Last login: Thu Jul 21 13:07:53 2011 from 10.0.2.2
</span><span class='line'>vagrant@lucid32:~<span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<h2>Provisionando la nueva m&aacute;quina</h2>

<p>Una vez que la m&aacute;quina se esta ejecutando no tiene
nada instalado, por lo que ahora lo que se requiere hacer es
definir la forma en la que deseamos instalar el software base necesario,
recordemos que la idea de usar vagrant es que podemos utilizar
la misma receta en diferentes ambientes de desarrollo obteniendo
siempre los mismos resultados.</p>

<p>Para este caso usaremos <a href="http://wiki.opscode.com/display/chef/Chef+Solo">chef-solo</a></p>

<p>Chef permite escribir las recetas de instalaci&oacute;n de paquetes
usando un DSL escrito en ruby.</p>

<p>Para activar chef, abrimos Vagrantfile y agregamos al final antes del
&uacute;ltimo <code>end</code> lo siguiente:</p>

<figure class='code'><figcaption><span>chef enabled  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1"># Enable and configure the chef solo provisioner</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="ss">:chef_solo</span> <span class="k">do</span> <span class="o">|</span><span class="n">chef</span><span class="o">|</span>
</span><span class='line'>    <span class="c1"># En este caso descargamos nuestro libro de recetas desde el web</span>
</span><span class='line'>    <span class="c1"># hay otras opciones para mantener las recetas dentro del proyecto</span>
</span><span class='line'>    <span class="n">chef</span><span class="o">.</span><span class="n">recipe_url</span> <span class="o">=</span> <span class="s2">&quot;http://files.vagrantup.com/getting_started/cookbooks.tar.gz&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Ejecuta la receta vagrant_main</span>
</span><span class='line'>    <span class="c1"># la cual hace toda la magia</span>
</span><span class='line'>    <span class="n">chef</span><span class="o">.</span><span class="n">add_recipe</span><span class="p">(</span><span class="s2">&quot;vagrant_main&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Y para ejecutar esta receta se necesita lanzar el comando:</p>

<figure class='code'><figcaption><span>vagrant provision  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant provision
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Running provisioner: Vagrant::Provisioners::ChefSolo...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Generating chef JSON and uploading...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Running chef-solo...
</span><span class='line'>stdin: is not a tty
</span><span class='line'><span class="o">[</span>Mon, 28 May 2012 16:09:24 -0700<span class="o">]</span> INFO: *** Chef 0.10.2 ***
</span><span class='line'><span class="o">[</span>Mon, 28 May 2012 16:09:25 -0700<span class="o">]</span> INFO: Setting the run_list to <span class="o">[</span><span class="s2">&quot;recipe[vagrant_main]&quot;</span><span class="o">]</span> from JSON
</span><span class='line'><span class="o">[</span>Mon, 28 May 2012 16:09:25 -0700<span class="o">]</span> INFO: Run List is <span class="o">[</span>recipe<span class="o">[</span>vagrant_main<span class="o">]]</span>
</span><span class='line'><span class="o">[</span>Mon, 28 May 2012 16:09:25 -0700<span class="o">]</span> INFO: Run List expands to <span class="o">[</span>vagrant_main<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Mon, 28 May 2012 16:09:25 -0700<span class="o">]</span> INFO: Starting Chef Run <span class="k">for </span>lucid32
</span><span class='line'><span class="o">[</span>Mon, 28 May 2012 16:09:25 -0700<span class="o">]</span> INFO: Processing execute<span class="o">[</span>apt-get update<span class="o">]</span> action run <span class="o">(</span>apt::default line 20<span class="o">)</span>
</span><span class='line'><span class="o">[</span>Mon, 28 May 2012 16:09:25 -0700<span class="o">]</span> INFO: execute<span class="o">[</span>apt-get update<span class="o">]</span> sh<span class="o">(</span>apt-get update<span class="o">)</span>
</span><span class='line'>...
</span><span class='line'><span class="o">[</span>Mon, 28 May 2012 16:16:15 -0700<span class="o">]</span> INFO: Processing service<span class="o">[</span>apache2<span class="o">]</span> action restart <span class="o">(</span>apache2::default line 189<span class="o">)</span>
</span><span class='line'><span class="o">[</span>Mon, 28 May 2012 16:16:17 -0700<span class="o">]</span> INFO: service<span class="o">[</span>apache2<span class="o">]</span> restarted
</span><span class='line'><span class="o">[</span>Mon, 28 May 2012 16:16:17 -0700<span class="o">]</span> INFO: Chef Run <span class="nb">complete </span>in 411.460964 seconds
</span><span class='line'><span class="o">[</span>Mon, 28 May 2012 16:16:17 -0700<span class="o">]</span> INFO: Running report handlers
</span><span class='line'><span class="o">[</span>Mon, 28 May 2012 16:16:17 -0700<span class="o">]</span> INFO: Report handlers <span class="nb">complete</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Redireccionar un puerto interno</h2>

<p>Para poder acceder desde afuera del ambiente debemos modificar los puertos
redireccionados.</p>

<p>Para lo cual editamos <code>Vagrantfile</code></p>

<figure class='code'><figcaption><span>chef enabled  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1"># Agregar esto cerca de la configuraci&amp;oacute;n de puertos comentada</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">forward_port</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">4567</span>
</span></code></pre></td></tr></table></div></figure>


<p>Para hacer que se tome en cuenta este nuevo puerto se debe recargar la m&aacute;quina</p>

<figure class='code'><figcaption><span>vagrant reload  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant reload
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Attempting graceful shutdown of VM...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Clearing any previously <span class="nb">set </span>forwarded ports...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Forwarding ports...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> -- <span class="nv">22</span> <span class="o">=</span>&gt; 2222 <span class="o">(</span>adapter 1<span class="o">)</span>
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> -- <span class="nv">80</span> <span class="o">=</span>&gt; 4567 <span class="o">(</span>adapter 1<span class="o">)</span>
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Creating shared folders metadata...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Clearing any previously <span class="nb">set </span>network interfaces...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Booting VM...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Waiting <span class="k">for </span>VM to boot. This can take a few minutes.
</span></code></pre></td></tr></table></div></figure>


<h2>Crear un archivo index.html para ver que est&aacute; funcionando</h2>

<p>Abrir tu editor favorito y colocar lo siguiente:</p>

<figure class='code'><figcaption><span>index html  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h1&gt;</span>Hello from a Vagrant VM<span class="nt">&lt;/h1&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ir al navegador y abrir <a href="http://localhost:4567">localhost:4567</a></p>

<p>Debe poder ver lo siguiente:</p>

<p><img src="http://marceloandrader.github.com/images/posts/vagrant-working.png" title="Pagina web funcionando en vagrant" ></p>

<h2>Eso es todo</h2>

<p>Si necesitan ayuda en algun punto que no lo trate con mucha explicaci&oacute;n
no duden en escribir en los comentarios.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Aislar ambientes de desarrollo con Vagrant]]></title>
    <link href="http://marceloandrader.github.com/blog/2012/02/06/aislar-ambientes-de-desarrollo-con-vagrant/"/>
    <updated>2012-02-06T18:00:00-05:00</updated>
    <id>http://marceloandrader.github.com/blog/2012/02/06/aislar-ambientes-de-desarrollo-con-vagrant</id>
    <content type="html"><![CDATA[<p>Si desarrollas en un solo tipo de &#8216;stack&#8217; de desarrollo lo m&aacute;s
com&uacute;n es instalar este stack en tu m&aacute;quina principal
y desarrollar directamente en el sistema operativo de tu preferencia.</p>

<p>En mi caso uso Mac OS y para desarrollar sitios web simples con el &#8216;stack&#8217; tipo
XAMP simplemente activaba apache y php que vienen preinstalados e instalaba
mysql copiando los binarios descargados desde la p&aacute;gina web.</p>

<p>Nada mal para la mayor&iacute;a de sitios que hab&aacute; desarrollado hasta ahora,
pero los problemas comienzan a darse cuando ya no solo desarrollas en un
solo lenguaje en el lado del servidor.</p>

<!-- more -->


<p>En los &uacute;ltimos a&ntilde;os he comenzado a desarrollar en ruby on rails
as&iacute; que esto complica un poco el panorama de mantener todo dentro del
mismo sistema operativo pero hay herramientas que fueron creadas para
ayudarte en esto, como <a href="http://beginrescueend.com/rvm/">rvm</a> o
<a href="https://github.com/sstephenson/rbenv">rbenv</a>.</p>

<p>El problema real comienza cuando necesitas duplicar un bug que solo sucede
en producci&oacute;n con versiones espec&iacute;ficas del software base instalado, para
lo cual necesitas mantener instaladas diferentes versiones de php, ruby, mysql,
tener tambi&eacute;n redis, realizar pruebas de nuevos lenguajes como nodejs
tener diferentes servidores web como nginx o lighttpd.</p>

<p>Tambi&eacute;n es un problema tener varios clientes, cada uno con un stack
diferente de despliegue, cada uno con versiones diferentes de compiladores,
interpretes, etc.</p>

<p>Buscando la mejor manera de manejar este problema encontr&eacute; un software
que me ha ayudado mucho, su nombre es <a href="http://vagrantup.com/">Vagrant</a>.</p>

<p>La soluci&oacute;n que propone este software es mantener un proyecto completamente
independiente de otros proyectos a trav&eacute;s de m&aacute;quinas virtuales, para lo
cual depende de <a href="https://www.virtualbox.org/">VirtualBox</a> y facilita la
construcci&oacute;n de est&aacute;s m&aacute;quinas automatizando las instalaciones con <a href="http://puppetlabs.com/">puppet</a>
o <a href="http://www.opscode.com/chef/">chef</a>.</p>

<p>Estuve probando este sistema en los &uacute;ltimos proyectos y me ha encantado,
aparte de vagrant que ayuda en la gesti&oacute;n de las m&aacute;quinas virtuales,
el que m&aacute;s se luce es chef, la idea es que puedes tener toda una &#8216;receta&#8217;
para instalar todo el software necesario para que se ejecute tu aplicaci&oacute;n
sobre el sistema operativo que ejecutas en producci&oacute;n, si lo usas
desde el primer momento del proyecto crear tu sistema de producci&oacute;n
es tan f&aacute;cil como ejecutar un comando.</p>

<p>En un post siguiente les contar&eacute; un poco m&aacute;s como se configura vagrant
y como se crea una receta b&aacute;sica con chef.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dependencias de Aplicaciones Web]]></title>
    <link href="http://marceloandrader.github.com/blog/2011/12/16/dependencias-de-aplicaciones-web/"/>
    <updated>2011-12-16T09:51:00-05:00</updated>
    <id>http://marceloandrader.github.com/blog/2011/12/16/dependencias-de-aplicaciones-web</id>
    <content type="html"><![CDATA[<p><img src="http://marceloandrader.github.com/images/posts/start-page-chrome.png" title="Mi p&aacute;gina de inicio en Chrome" ></p>

<p>En esta secci&oacute;n s&iacute; hay mucho por contar, cada d&iacute;a dependo m&aacute;s y m&aacute;s en servicios web.</p>

<!-- more -->


<p>Entre los que m&aacute;s uso por frecuencia est&aacute;n:</p>

<ul>
<li><strong><a href="http://mail.google.com/">Gmail</a></strong> Para el correo personal</li>
<li><strong><a href="http://github.com/">Github</a></strong> Para control de c&oacute;digo fuente</li>
<li><strong><a href="http://campfirenow.com/">Campfire</a></strong> Chat as&iacute;ncrono</li>
<li><strong><a href="http://docs.google.com/">Google docs</a></strong> Para mantener documentos en la nube</li>
<li><strong><a href="http://calendar.google.com/">Google calendar</a></strong> Para recordar citas</li>
<li><strong><a href="http://www.google.com/reader/">Google reader</a></strong> Para mantener los feeds</li>
<li><strong><a href="http://www.dropbox.com/">Dropbox</a></strong> Para respaldar y compartir archivos</li>
<li><strong><a href="http://www.google.com/apps/">Google apps</a></strong> Para el correo del trabajo</li>
<li><strong><a href="http://getcloudapp.com/">CloudApp</a></strong> para compartir screenshots</li>
</ul>


<p>Estas no son precisamente dependencias, m&aacute;s bien son como un &#8216;nice to have&#8217;:</p>

<ul>
<li><strong><a href="https://twitter.com/MarceloAndrade">Twitter</a></strong> Para estar al tanto de lo que pasa</li>
<li><strong><a href="https://facebook.com/marcelo.andrade">Facebook</a></strong> Para estar en contacto con la familia</li>
<li><strong><a href="https://plus.google.com/103010069734862462788">Google+</a></strong> Cuando queda tiempo</li>
</ul>


<p>Cu&aacute;les son sus servicios web preferidos/necesarios para su trabajo?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dependencias de Aplicaciones CLI]]></title>
    <link href="http://marceloandrader.github.com/blog/2011/12/15/dependencias-de-aplicaciones-cli/"/>
    <updated>2011-12-15T17:16:00-05:00</updated>
    <id>http://marceloandrader.github.com/blog/2011/12/15/dependencias-de-aplicaciones-cli</id>
    <content type="html"><![CDATA[<p>Estas son mis aplicaciones preferidas, para obtener los comandos que m&aacute;s uso en la l&iacute;nea de comandos</p>

<figure class='code'><figcaption><span>comandos m&aacute;s usados  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">history</span> | awk <span class="s1">&#39;{CMD[$2]++;count++;}END { for (a in CMD)print CMD[a] &quot; &quot; CMD[a]/count*100 &quot;% &quot; a;}&#39;</span> | grep -v <span class="s2">&quot;./&quot;</span> | column -c3 -s <span class="s2">&quot; &quot;</span> -t | sort -nr | nl |  head -n20
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>Resultado:</p>

<pre>
     1  3194  33.7347%    git     # para trabajar con c&oacute;digo fuente
     2  1535  16.2125%    cd
     3  854   9.01986%    ls
     4  486   5.13308%    ssh     # conexi&oacute;n a servidores
     5  195   2.05957%    cat
     6  193   2.03845%    sudo
     7  172   1.81665%    mate
     8  155   1.63709%    curl    # probar peticiones HTTP
     9  152   1.60541%    tail    # ver logs
    10  151   1.59485%    vim
    11  150   1.58428%    rake
    12  120   1.26743%    cap     # desplegar aplicaciones (capistrano)
    13  97    1.0245%     ping
    14  85    0.897761%   phpunit
    15  80    0.844951%   find
    16  79    0.83439%    rm
    17  79    0.83439%    mysql
    18  73    0.771018%   php
    19  68    0.718209%   irb
    20  61    0.644275%   mvim
</pre>


<p>Pueden comentar el uso de su l&iacute;nea de comandos.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dependencias de Software de Escritorio]]></title>
    <link href="http://marceloandrader.github.com/blog/2011/12/15/dependencias-de-software-de-escritorio/"/>
    <updated>2011-12-15T16:34:00-05:00</updated>
    <id>http://marceloandrader.github.com/blog/2011/12/15/dependencias-de-software-de-escritorio</id>
    <content type="html"><![CDATA[<p><img src="http://marceloandrader.github.com/images/posts/dock-marcelo-andrade.png" title="Mi actual Dock" ></p>

<p>Como sistema operativo uso Mac OS X (Snow Leopard), las aplicaciones que m&aacute;s uso en orden de frecuencia de
uso ser&iacute;an:</p>

<!-- more -->


<ul>
<li><strong>Google Chrome</strong> Para navegar y desarrollar</li>
<li><strong>Skype</strong> Para estar en contacto con compa&ntilde;eros del trabajo</li>
<li><strong>Adium</strong> Para conectarme al gtalk</li>
<li><strong>Terminal</strong> Ejecutar comandos</li>
<li><strong>MacVim</strong> Edici&oacute;n de texto, c&oacute;digo</li>
<li><strong>TextMate</strong> Edici&oacute;n de texto, c&oacute;digo</li>
<li><strong>GitHub</strong> Control de c&oacute;digo fuente</li>
<li><strong>Finder</strong> Navegar archivos</li>
<li><strong>Photoshop</strong> Ver dise&ntilde;os, editar im&aacute;genes</li>
<li><strong>Cloud</strong> Compartir screenshots</li>
<li><strong>Cyberduck</strong> Conectarme a servidores remotos para editar archivos</li>
<li><strong>OpenOffice/LibreOffice</strong> Ver documentos de Word/Excel</li>
<li><strong>Sequel Pro</strong> Conectarme a mysql</li>
<li><strong>VirtualBox</strong> Para manejar m&aacute;quinas virtuales (normalmente servidores)</li>
</ul>


<p>Entre los servicios instalados en mi computador est&aacute;n:</p>

<ul>
<li><strong>MySQL Server</strong> Bases de datos</li>
<li><strong>PHP</strong> Para desarrollo de p&aacute;ginas din&aacute;micas</li>
<li><strong>Ruby</strong> Para desarrollo de ruby on rails o scripting</li>
<li><strong>Apache</strong> Como servidor web</li>
</ul>

]]></content>
  </entry>
  
</feed>
